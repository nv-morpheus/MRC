# SPDX-FileCopyrightText: Copyright (c) 2022, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI Pipeline
run-name: CI Pipeline

on:
  workflow_call:
    inputs:
      aws_region:
        default: 'us-west-2'
        type: string
      run_check:
        required: true
        type: boolean
      run_package_conda:
        required: true
        type: boolean
      container:
        required: true
        type: string
      test_container:
        required: true
        type: string
    secrets:
      CODECOV_TOKEN:
        required: true
      CONDA_TOKEN:
        required: true
      GHA_AWS_ACCESS_KEY_ID:
        required: true
      GHA_AWS_SECRET_ACCESS_KEY:
        required: true
      NGC_API_KEY:
        required: true

env:
  AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
  AWS_ACCESS_KEY_ID: "${{ secrets.GHA_AWS_ACCESS_KEY_ID }}"
  AWS_SECRET_ACCESS_KEY: "${{ secrets.GHA_AWS_SECRET_ACCESS_KEY }}"
  BUILD_CC: "gcc"
  CHANGE_TARGET: "${{ github.base_ref }}"
  GH_TOKEN: "${{ github.token }}"
  GIT_COMMIT: "${{ github.sha }}"
  MRC_ROOT: "${{ github.workspace }}/mrc"
  WORKSPACE: "${{ github.workspace }}/mrc"
  WORKSPACE_TMP: "${{ github.workspace }}/tmp"


jobs:
  check:
    if: ${{ inputs.run_check }}
    name: Check
    runs-on: [self-hosted, linux, amd64, cpu4]
    timeout-minutes: 60
    container:
      credentials:
        username: '$oauthtoken'
        password: ${{ secrets.NGC_API_KEY }}
      image: ${{ inputs.container }}
    strategy:
      fail-fast: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: false
          path: 'mrc'
          fetch-depth: 0

      - name: Check
        shell: bash
        run: ./mrc/ci/scripts/github/checks.sh

  build:
    name: Build
    runs-on: [self-hosted, linux, amd64, cpu16]
    timeout-minutes: 60
    container:
      credentials:
        username: '$oauthtoken'
        password: ${{ secrets.NGC_API_KEY }}
      image: ${{ inputs.container }}
    strategy:
      fail-fast: true
      matrix:
        build_cc: ["gcc", "gcc-coverage", "clang"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: false
          path: 'mrc'

      - name: Build:linux:x86_64
        shell: bash
        env:
          BUILD_CC: ${{ matrix.build_cc }}
        run: ./mrc/ci/scripts/github/build.sh

  test:
    name: Test
    needs: [build]
    runs-on: [self-hosted, linux, amd64, gpu-v100-495-1]
    timeout-minutes: 60
    container:
      credentials:
        username: '$oauthtoken'
        password: ${{ secrets.NGC_API_KEY }}
      image: ${{ inputs.test_container }}
      options: --cap-add=sys_nice
      env:
        NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }}
        PARALLEL_LEVEL: '10'
    strategy:
      fail-fast: true
      matrix:
        build_cc: ["gcc", "gcc-coverage"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: false
          path: 'mrc'

      - name: Test:linux:x86_64
        shell: bash
        env:
          BUILD_CC: ${{ matrix.build_cc }}
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: ./mrc/ci/scripts/github/test.sh

  documentation:
    name: Documentation
    needs: [build]
    runs-on: [self-hosted, linux, amd64, cpu4]
    timeout-minutes: 60
    container:
      credentials:
        username: '$oauthtoken'
        password: ${{ secrets.NGC_API_KEY }}
      image: ${{ inputs.container }}
    strategy:
      fail-fast: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: false
          path: 'mrc'

      - name: build_docs
        shell: bash
        run: ./mrc/ci/scripts/github/docs.sh

  benchmark:
    name: Benchmark
    needs: [build]
    runs-on: [self-hosted, linux, amd64, cpu4]
    timeout-minutes: 60
    container:
      credentials:
        username: '$oauthtoken'
        password: ${{ secrets.NGC_API_KEY }}
      image: ${{ inputs.container }}
      options: --cap-add=sys_nice
    strategy:
      fail-fast: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: false
          path: 'mrc'

      - name: pre_benchmark
        shell: bash
        run: ./mrc/ci/scripts/github/pre_benchmark.sh
      - name: benchmark
        shell: bash
        run: ./mrc/ci/scripts/github/benchmark.sh
      - name: post_benchmark
        shell: bash
        run: ./mrc/ci/scripts/github/benchmark.sh


  package:
    name: Package
    if: ${{ inputs.run_package_conda }}
    needs: [benchmark, documentation, test]
    runs-on: [self-hosted, linux, amd64, cpu16]
    timeout-minutes: 60
    container:
      credentials:
        username: '$oauthtoken'
        password: ${{ secrets.NGC_API_KEY }}
      image: ${{ inputs.container }}
    strategy:
      fail-fast: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: false
          path: 'mrc'
          fetch-depth: 0

      - name: conda
        shell: bash
        env:
          CONDA_TOKEN: "${{ secrets.CONDA_TOKEN }}"
        run: ./mrc/ci/scripts/github/conda.sh
