# SPDX-FileCopyrightText: Copyright (c) 2022-2024, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI Pipeline
run-name: CI Pipeline

on:
  workflow_call:
    inputs:
      run_check:
        description: 'Runs the check stage to verify code integrity'
        required: true
        type: boolean
      conda_run_build:
        description: 'Runs the conda-build stage to ensure the conda package builds successfully'
        required: true
        type: boolean
      conda_upload_label:
        description: 'The label to use when uploading the conda package. Leave empty to disable uploading'
        required: true
        type: string
      container:
        description: 'The container to use for all stages except the test stage'
        required: true
        type: string
      test_container:
        description: 'The container to use for the test stage'
        required: true
        type: string
      pr_info:
        description: 'The JSON string containing the PR information'
        required: true
        type: string
    secrets:
      CODECOV_TOKEN:
        required: true
      CONDA_TOKEN:
        required: true
      NGC_API_KEY:
        required: true

# We only support ubuntu, so bash is the default
defaults:
  run:
    shell: bash

env:
  CHANGE_TARGET: "${{ github.base_ref }}"
  GH_TOKEN: "${{ github.token }}"
  GIT_COMMIT: "${{ github.sha }}"
  MRC_ROOT: "${{ github.workspace }}/mrc"
  RAPIDS_CONDA_RETRY_MAX: "5"
  WORKSPACE: "${{ github.workspace }}/mrc"
  WORKSPACE_TMP: "${{ github.workspace }}/tmp"

permissions:
  actions: none
  checks: none
  contents: read
  deployments: none
  discussions: none
  id-token: write
  issues: none
  packages: read
  pages: none
  pull-requests: read
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  check:
    if: ${{ inputs.run_check }}
    name: Check
    runs-on: linux-amd64-cpu4
    timeout-minutes: 60
    container:
      credentials:
        username: '$oauthtoken'
        password: ${{ secrets.NGC_API_KEY }}
      image: ${{ inputs.container }}
    strategy:
      fail-fast: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: false
          path: 'mrc'
          fetch-depth: 0

      - name: Get AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 43200 # 12h

      - name: Check
        shell: bash
        run: ./mrc/ci/scripts/github/checks.sh

  build:
    name: Build
    runs-on: linux-amd64-cpu16
    timeout-minutes: 60
    container:
      credentials:
        username: '$oauthtoken'
        password: ${{ secrets.NGC_API_KEY }}
      image: ${{ inputs.container }}
    strategy:
      fail-fast: true
      matrix:
        build_cc: ["gcc", "clang"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: false
          path: 'mrc'

      - name: Get AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 43200 # 12h

      - name: Build:linux:x86_64
        shell: bash
        env:
          BUILD_CC: ${{ matrix.build_cc }}
        run: ./mrc/ci/scripts/github/build.sh

  test:
    name: Test
    needs: [build]
    runs-on: linux-amd64-gpu-v100-latest-1
    timeout-minutes: 60
    container:
      credentials:
        username: '$oauthtoken'
        password: ${{ secrets.NGC_API_KEY }}
      image: ${{ inputs.test_container }}
      options: "--cap-add=sys_nice --cap-add=sys_ptrace"
      env:
        NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }}
        PARALLEL_LEVEL: '10'
    strategy:
      fail-fast: true
      matrix:
        build_cc: ["gcc", "clang"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: false
          path: 'mrc'

      - name: Get AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 43200 # 12h

      - name: Test:linux:x86_64
        shell: bash
        env:
          BUILD_CC: ${{ matrix.build_cc }}
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: ./mrc/ci/scripts/github/test.sh

  codecov:
    name: Code Coverage
    runs-on: linux-amd64-gpu-v100-latest-1
    timeout-minutes: 60
    container:
      credentials:
        username: '$oauthtoken'
        password: ${{ secrets.NGC_API_KEY }}
      env:
        BUILD_CC: "gcc-coverage"
        NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }}
        PARALLEL_LEVEL: '10'
      image: ${{ inputs.test_container }}
      options: "--cap-add=sys_nice --cap-add=sys_ptrace"
    strategy:
      fail-fast: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: false
          path: 'mrc'

      - name: Get AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 43200 # 12h

      - name: Build
        shell: bash
        run: ./mrc/ci/scripts/github/build.sh

      - name: Test with Codecov
        shell: bash
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: ./mrc/ci/scripts/github/test_codecov.sh

  documentation:
    name: Documentation
    needs: [build]
    runs-on: linux-amd64-cpu4
    timeout-minutes: 60
    container:
      credentials:
        username: '$oauthtoken'
        password: ${{ secrets.NGC_API_KEY }}
      image: ${{ inputs.container }}
    strategy:
      fail-fast: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: false
          path: 'mrc'

      - name: Get AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 43200 # 12h

      - name: build_docs
        shell: bash
        run: ./mrc/ci/scripts/github/docs.sh

  benchmark:
    name: Benchmark
    needs: [build]
    runs-on: linux-amd64-cpu4
    timeout-minutes: 60
    container:
      credentials:
        username: '$oauthtoken'
        password: ${{ secrets.NGC_API_KEY }}
      image: ${{ inputs.container }}
      options: --cap-add=sys_nice
    strategy:
      fail-fast: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: false
          path: 'mrc'

      - name: Get AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 43200 # 12h

      - name: pre_benchmark
        shell: bash
        run: ./mrc/ci/scripts/github/pre_benchmark.sh
      - name: benchmark
        shell: bash
        run: ./mrc/ci/scripts/github/benchmark.sh
      - name: post_benchmark
        shell: bash
        run: ./mrc/ci/scripts/github/post_benchmark.sh


  package:
    name: Package
    if: ${{ inputs.conda_run_build }}
    needs: [benchmark, documentation, test]
    runs-on: linux-amd64-cpu16
    timeout-minutes: 60
    container:
      credentials:
        username: '$oauthtoken'
        password: ${{ secrets.NGC_API_KEY }}
      image: ${{ inputs.container }}
    strategy:
      fail-fast: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: false
          path: 'mrc'
          fetch-depth: 0

      - name: Get AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 43200 # 12h

      - name: conda
        shell: bash
        env:
          CONDA_TOKEN: "${{ secrets.CONDA_TOKEN }}"
          SCRIPT_ARGS: "${{ inputs.conda_upload_label != '' && 'upload' || '' }}"
          CONDA_PKG_LABEL: "${{ inputs.conda_upload_label }}"
        run: ./mrc/ci/scripts/github/conda.sh $SCRIPT_ARGS
