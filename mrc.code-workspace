{
    "folders": [
        {
            "path": "."
        }
    ],
    "launch": {
        // Use IntelliSense to learn about possible attributes.
        // Hover to view descriptions of existing attributes.
        // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
        "version": "0.2.0",
        "configurations": [
            {
                // This is needed to allow C++ Test Explorer to debug tests. It searches for the 1st available launch config with cppdbg
                "name": "Debug Tests Runner",
                "type": "cppdbg",
                "request": "launch",
                "args": [],
                "stopAtEntry": false,
                "cwd": "${workspaceFolder}",
                "environment": [
                    {
                        "name": "GLOG_v",
                        "value": "10",
                    }
                ],
                "externalConsole": false,
                "MIMode": "gdb",
                "setupCommands": [
                    {
                        "description": "Enable pretty-printing for gdb",
                        "text": "-enable-pretty-printing",
                    },
                    {
                        "description": "Skip stdio-common files",
                        "text": "-interpreter-exec console \"skip -gfi **/bits/*.h\""
                    },
                    // {
                    //     "description": "Stay on same thread when debugging",
                    //     "text": "-interpreter-exec console \"set scheduler-locking step\""
                    // }
                ],
                "miDebuggerPath": "gdb"
            },
            {
                "name": "debug test_mrc.x",
                "type": "cppdbg",
                "request": "launch",
                "program": "${workspaceFolder}/build/mrc/tests/test_mrc",
                "args": [],
                "stopAtEntry": false,
                "cwd": "${workspaceFolder}",
                "environment": [],
                "externalConsole": false,
                "MIMode": "gdb",
                "setupCommands": [
                    {
                        "description": "Enable pretty-printing for gdb",
                        "text": "-enable-pretty-printing",
                        "ignoreFailures": true
                    }
                ],
                "preLaunchTask": "C/C++: g++ build active file",
                "miDebuggerPath": "gdb"
            },
            {
                "name": "debug bench_mrc.x",
                "type": "cppdbg",
                "request": "launch",
                "program": "${workspaceFolder}/build/benchmarks/bench_mrc",
                "args": [],
                "stopAtEntry": false,
                "cwd": "${workspaceFolder}",
                "environment": [],
                "externalConsole": false,
                "MIMode": "gdb",
                "setupCommands": [
                    {
                        "description": "Enable pretty-printing for gdb",
                        "text": "-enable-pretty-printing",
                        "ignoreFailures": true
                    }
                ],
                "preLaunchTask": "C/C++: g++ build active file",
                "miDebuggerPath": "gdb"
            },
            {
                "name": "Debug MRC from Python",
                "type": "cppdbg",
                "request": "launch",
                "program": "python",
                "args": [
                    "-m",
                    "pytest",
                    "-s",
                    "python/tests/test_node.py::test_launch_options_source[iterator-3-1]"
                ],
                "stopAtEntry": false,
                "cwd": "${workspaceFolder}",
                "environment": [
                    {
                        "name": "UCX_ERROR_SIGNALS",
                        "value": ""
                    },
                    {
                        "name": "GLOG_v",
                        "value": "10"
                    },
                    {
                        "name": "GLOG_logtostderr",
                        "value": "1"
                    }
                ],
                "externalConsole": false,
                "MIMode": "gdb",
                "setupCommands": [
                    {
                        "description": "Enable pretty-printing for gdb",
                        "text": "-enable-pretty-printing",
                        "ignoreFailures": true
                    },
                    {
                        "description": "Skip stdio-common files",
                        "text": "-interpreter-exec console \"skip -gfi **/bits/*.h\""
                    },
                ],
                "symbolLoadInfo": {
                    "loadAll": false,
                    "exceptionList": "libmrc*.so;cudf_helpers.*;executor.*;morpheus.*;node.*;options.*;pipeline.*;segment.*;subscriber.*;test_edges_cpp.*"
                },
                "miDebuggerPath": "gdb",
                "sourceFileMap": {
                    "${workspaceFolder}": {
                        "editorPath": "${workspaceFolder}",
                        "useForBreakpoints": "true"
                    },
                },
            },
            {
                "name": "Python: Testing Configuration (Used by test runner in debug mode)",
                "type": "python",
                "request": "launch",
                "program": "${file}",
                "console": "integratedTerminal",
                "justMyCode": false,
                "purpose": [
                    "debug-in-terminal",
                    "debug-test"
                ],
                "env": {
                    "GLOG_v": "10",
                    "GLOG_logtostderr": "1",
                    "UCX_ERROR_SIGNALS": "",
                },
            },
        ]
    },
    "settings": {
        "C_Cpp.files.exclude": {
            "**/.vscode": true,
            "**/vcpkg_installed": true
        },
        "[cmake]": {
            "editor.tabSize": 2
        },
        "[cpp]": {
            "editor.detectIndentation": false,
            "editor.formatOnSave": true,
            "editor.semanticHighlighting.enabled": true,
            "editor.suggest.insertMode": "replace",
            "editor.tabSize": 4,
            "editor.wordBasedSuggestions": false,
            "editor.wordWrapColumn": 120
        },
        "[python]": {
            "editor.codeActionsOnSave": {
                "source.organizeImports": true
            },
            "editor.formatOnSave": true,
            "editor.rulers": [
                120
            ],
            "editor.tabSize": 4
        },
        "cmake.configureArgs": [
            "-DCMAKE_MESSAGE_CONTEXT_SHOW:BOOL=ON", // Show message context by default
            "-DMRC_PYTHON_INPLACE_BUILD:BOOL=ON" // Allow inplace build for python. Use `pip install -e .` from the python folder to install
        ],
        "cmake.format.allowOptionalArgumentIndentation": true,
        "files.insertFinalNewline": true,
        "files.trimTrailingWhitespace": true,
        "files.watcherExclude": {
            "**/.cache/**": true,
            "**/.git/objects/**": true,
            "**/.git/subtree-cache/**": true,
            "**/.hg/store/**": true,
            "**/node_modules/*/**": true
        },
        "isort.args": [
            "--settings-file=${workspaceFolder}/python/setup.cfg"
        ],
        "python.analysis.extraPaths": [
            "python"
        ],
        "python.autoComplete.extraPaths": [
            "./python"
        ],
        "python.formatting.provider": "yapf",
        "python.formatting.yapfArgs": [
            "--style=${workspaceFolder}/python/setup.cfg"
        ],
        "python.linting.flake8Args": [
            "--config=${workspaceFolder}/python/setup.cfg"
        ],
        "python.linting.flake8Enabled": true,
        "python.linting.pylintArgs": [
            "--rcfile=${workspaceFolder}/python/.pylintrc"
        ],
        "python.linting.pylintEnabled": true,
        "python.testing.cwd": "${workspaceFolder}/python",
        "python.testing.pytestArgs": [
            "-s"
        ],
        "python.testing.pytestEnabled": true,
        "python.testing.unittestEnabled": false,
        "testMate.cpp.debug.configTemplate": {
            "args": "${argsArray}",
            "cwd": "${cwd}",
            "darwin": {
                "MIMode": "lldb",
                "type": "cppdbg"
            },
            "env": "${envObj}",
            "environment": "${envObjArray}",
            "linux": {
                "MIMode": "gdb",
                "symbolLoadInfo": {
                    "exceptionList": "*libmrc*.so",
                    "loadAll": false
                },
                "type": "cppdbg"
            },
            "program": "${exec}",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing"
                },
                {
                    "description": "Skip stdio-common files",
                    "text": "-interpreter-exec console \"skip -gfi **/bits/*.h\""
                }
                // {
                //     "description": "Stay on same thread when debugging",
                //     "text": "-interpreter-exec console \"set scheduler-locking step\""
                // }
            ],
            "sourceFileMap": "${sourceFileMapObj}",
            "testMate.cpp.debug.setEnv": {
                "GLOG_v": "10",
                "GTEST_CATCH_EXCEPTIONS": "0", // Allow the debugger to catch exceptions
                "UCX_ERROR_SIGNALS": "" // Prevent UCX from capturing errors
            },
            "type": "cppvsdbg",
            "win32": {
                "type": "cppvsdbg"
            }
        },
        "testMate.cpp.log.logpanel": true,
        "testMate.cpp.test.executables": "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}_*.x",
    },
    "extensions": {
        // See https://go.microsoft.com/fwlink/?LinkId=827846 to learn about workspace recommendations.
        // Extension identifier format: ${publisher}.${name}. Example: vscode.csharp
        // List of extensions which should be recommended for users of this workspace.
        "recommendations": [
            "josetr.cmake-language-support-vscode",
            "llvm-vs-code-extensions.vscode-clangd",
            "matepek.vscode-catch2-test-adapter",
            "ms-vscode.cmake-tools",
            "stkb.rewrap",
            "twxs.cmake",
        ],
        // List of extensions recommended by VS Code that should not be recommended for users of this workspace.
        "unwantedRecommendations": [
            "austin.code-gnu-global"
        ]
    }
}
