/**
 * SPDX-FileCopyrightText: Copyright (c) 2021-2022,NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

import "google/protobuf/any.proto";

package mrc.codable.protos;

enum MemoryKind
{
    Host = 0;
    Pinned = 1;
    Device = 2;
    Managed = 3;
    None = 99;
}

message RemoteMemoryDescriptor
{
    // the memory region must contain the remote buffer specified by the start at remote_address
    // and extending remote_bytes
    // if the remote buffer is part of a larger memory region, the remote_key should map that entire region
    // the remote registration cache will associated the remote_key with the entire memory region, thus for
    // for the pool/slab allocators, we should increase our cache hits and avoid the expensive key upacking

    uint64 instance_id = 1;
    uint64 address = 2;
    uint64 bytes = 3;
    uint64 memory_block_address = 4;
    uint64 memory_block_size = 5;
    bytes remote_key = 6;
    MemoryKind memory_kind = 7;
    bool should_cache = 8;
}

message PackedDescriptor
{
    uint32 buffer_id = 1;
    uint64 remote_address = 2;
    uint64 remote_bytes = 3;
    MemoryKind memory_kind = 4;
}

message EagerDescriptor
{
    bytes data = 1;
    MemoryKind memory_kind = 2;
}

message MetaDataDescriptor
{
    google.protobuf.Any meta_data = 1;
}

message Descriptor
{
    oneof desc
    {
        RemoteMemoryDescriptor remote_desc    = 1;
        PackedDescriptor       packed_desc    = 2;
        EagerDescriptor        eager_desc     = 3;
        MetaDataDescriptor     meta_data_desc = 4;
    }
}

message Object
{
    int32 starting_descriptor_idx  = 1;
    int32 parent_object_idx = 2;
    uint64 type_index_hash = 3;
}

message EncodedObject
{
    repeated Descriptor descriptors = 1;
    repeated Object     objects     = 2;
    google.protobuf.Any meta_data   = 3;
}

message RemoteDescriptor
{
    uint64 instance_id = 1;
    uint64 object_id = 2;
    uint64 tokens = 3;
    EncodedObject encoded_object = 4;
}
